{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "machine_shape": "hm",
      "gpuType": "V100",
      "mount_file_id": "1-fmV36xjxuqbDrBTfkWrVAJPW8y3lNus",
      "authorship_tag": "ABX9TyO7JY2w1V7fGOIOyWEwMA2l",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Minhvt34/AF-Classification-from-a-short-single-lead-ECG-recording/blob/main/On_cinc17\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "fozNy4GDcoEp"
      },
      "outputs": [],
      "source": [
        "from build_datasets import load_all, split, make_json"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random"
      ],
      "metadata": {
        "id": "k9nWUoPtfozt"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip /content/drive/MyDrive/DSA/data/training2017.zip -d ./data/training2017/"
      ],
      "metadata": {
        "id": "ba10Z2JpgCvy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "random.seed(2018)\n",
        "\n",
        "dev_frac = 0.1\n",
        "data_path = \"./data/training2017/training2017/\"\n",
        "dataset = load_all(data_path)\n",
        "train, dev = split(dataset, dev_frac)\n",
        "make_json(\"./data/saved_json/train.json\", train)\n",
        "make_json(\"./data/saved_json/dev.json\", dev)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gOZWqcAlfjwF",
        "outputId": "e8c1a9f9-f8cd-4cc4-bce0-87935d3e205b"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 8528/8528 [00:01<00:00, 5573.75it/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from __future__ import print_function\n",
        "from __future__ import  division\n",
        "from __future__ import absolute_import\n",
        "\n",
        "import json\n",
        "import keras\n",
        "import numpy\n",
        "import os\n",
        "import random\n",
        "import time"
      ],
      "metadata": {
        "id": "LQE10ho8g5kP"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from ecg import network\n",
        "from ecg import load\n",
        "from ecg import util"
      ],
      "metadata": {
        "id": "8zXDJgr0g9t5"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "MAX_EPOCHS = 100\n",
        "\n",
        "def make_save_dir(dirname, experiment_name):\n",
        "    start_time = str(int(time.time())) + '_' + str(random.randrange(1000))\n",
        "    save_dir = os.path.join(dirname, experiment_name, start_time)\n",
        "\n",
        "    if not os.path.exists(save_dir):\n",
        "        os.makedirs(save_dir)\n",
        "    return save_dir\n",
        "\n",
        "def get_filename_for_saving(save_dir):\n",
        "    return os.path.join(save_dir,\n",
        "                        \"{epoch:03d}-{loss:.3f}-{accuracy:.3f}.hdf5\")"
      ],
      "metadata": {
        "id": "6VsbXwSfg_bM"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "config_file_path = \"./config.json\"\n",
        "params = json.load(open(config_file_path, 'r'))"
      ],
      "metadata": {
        "id": "UYSN_Ws2hB_p"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "params[\"save_dir\"]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "dd1Jiza3hZ7U",
        "outputId": "3cc2574b-da19-45e3-e24c-90f8f7f7c116"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'./saved_dir'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Loading training set...\")\n",
        "train = load.load_dataset(params['train'])\n",
        "print(\"Loading dev set...\")\n",
        "dev = load.load_dataset(params['dev'])\n",
        "print(\"Building preprocessor...\")\n",
        "preproc = load.Preproc(*train)\n",
        "print(\"Training size: \" + str(len(train[0])) + \" examples.\")\n",
        "print(\"Dev size: \" + str(len(dev[0])) + \" examples.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L6A7PngAhepW",
        "outputId": "19f27f8e-4be4-4481-bb26-dc32d8825049"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading training set...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 7676/7676 [00:01<00:00, 5641.32it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading dev set...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 852/852 [00:00<00:00, 5790.60it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Building preprocessor...\n",
            "Training size: 7676 examples.\n",
            "Dev size: 852 examples.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# EDA"
      ],
      "metadata": {
        "id": "ukhPXOCj6R-M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def rhythms_per_patient(data_json):\n",
        "    rhythms_patients = collections.defaultdict(set)\n",
        "    with open(data_json, 'r') as fid:\n",
        "        examples = [json.loads(l) for l in fid]\n",
        "    for ex in examples:\n",
        "        pid = os.path.basename(ex['ecg']).split(\"_\")[0]\n",
        "        for l in ex['labels']:\n",
        "            rhythms_patients[l].add(pid)\n",
        "    rs = sorted(rhythms_patients.keys())\n",
        "    for r in rs:\n",
        "        print(\"{:>10} {}\".format(r, len(rhythms_patients[r])))"
      ],
      "metadata": {
        "id": "Ge4iZbVW6Vgy"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Training set\")\n",
        "rhythms_per_patient(\"./data/saved_json/train.json\")\n",
        "print(\"Testing set\")\n",
        "rhythms_per_patient(\"./data/saved_json/dev.json\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RQ_rWWyp6aks",
        "outputId": "356ad413-26d3-4e51-f062-f2a41f14398e"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training set\n",
            "         A 686\n",
            "         N 4590\n",
            "         O 2156\n",
            "         ~ 244\n",
            "Testing set\n",
            "         A 72\n",
            "         N 486\n",
            "         O 259\n",
            "         ~ 35\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model config"
      ],
      "metadata": {
        "id": "5txeoL6a6rIV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "save_dir = make_save_dir(params['save_dir'], \"experiment\")\n",
        "\n",
        "util.save(preproc, save_dir)\n",
        "\n",
        "params.update({\n",
        "    \"input_shape\": [None, 1],\n",
        "    \"num_categories\": len(preproc.classes)\n",
        "})"
      ],
      "metadata": {
        "id": "o0I12s-4hiet"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = network.build_network(**params)\n",
        "\n",
        "stopping = keras.callbacks.EarlyStopping(patience=8)\n",
        "\n",
        "reduce_lr = keras.callbacks.ReduceLROnPlateau(\n",
        "    factor=0.1,\n",
        "    patience=2,\n",
        "    min_lr=params[\"learning_rate\"] * 0.001)\n",
        "\n",
        "checkpointer = keras.callbacks.ModelCheckpoint(\n",
        "    filepath=get_filename_for_saving(save_dir),\n",
        "    save_best_only=False)\n",
        "\n",
        "batch_size = params.get(\"batch_size\", 32)"
      ],
      "metadata": {
        "id": "yY-E8auThtk4"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LfaKu6luDNph",
        "outputId": "79d0be40-ef8a-42c1-c70e-9e4d5dc6c7f9"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_2\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                   Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            " inputs (InputLayer)            [(None, None, 1)]    0           []                               \n",
            "                                                                                                  \n",
            " conv1d_66 (Conv1D)             (None, None, 32)     544         ['inputs[0][0]']                 \n",
            "                                                                                                  \n",
            " batch_normalization_66 (BatchN  (None, None, 32)    128         ['conv1d_66[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_68 (Activation)     (None, None, 32)     0           ['batch_normalization_66[0][0]'] \n",
            "                                                                                                  \n",
            " conv1d_67 (Conv1D)             (None, None, 32)     16416       ['activation_68[0][0]']          \n",
            "                                                                                                  \n",
            " batch_normalization_67 (BatchN  (None, None, 32)    128         ['conv1d_67[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_69 (Activation)     (None, None, 32)     0           ['batch_normalization_67[0][0]'] \n",
            "                                                                                                  \n",
            " dropout_32 (Dropout)           (None, None, 32)     0           ['activation_69[0][0]']          \n",
            "                                                                                                  \n",
            " max_pooling1d_32 (MaxPooling1D  (None, None, 32)    0           ['activation_68[0][0]']          \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " conv1d_68 (Conv1D)             (None, None, 32)     16416       ['dropout_32[0][0]']             \n",
            "                                                                                                  \n",
            " add_32 (Add)                   (None, None, 32)     0           ['max_pooling1d_32[0][0]',       \n",
            "                                                                  'conv1d_68[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_68 (BatchN  (None, None, 32)    128         ['add_32[0][0]']                 \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_70 (Activation)     (None, None, 32)     0           ['batch_normalization_68[0][0]'] \n",
            "                                                                                                  \n",
            " conv1d_69 (Conv1D)             (None, None, 32)     16416       ['activation_70[0][0]']          \n",
            "                                                                                                  \n",
            " batch_normalization_69 (BatchN  (None, None, 32)    128         ['conv1d_69[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_71 (Activation)     (None, None, 32)     0           ['batch_normalization_69[0][0]'] \n",
            "                                                                                                  \n",
            " dropout_33 (Dropout)           (None, None, 32)     0           ['activation_71[0][0]']          \n",
            "                                                                                                  \n",
            " max_pooling1d_33 (MaxPooling1D  (None, None, 32)    0           ['add_32[0][0]']                 \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " conv1d_70 (Conv1D)             (None, None, 32)     16416       ['dropout_33[0][0]']             \n",
            "                                                                                                  \n",
            " add_33 (Add)                   (None, None, 32)     0           ['max_pooling1d_33[0][0]',       \n",
            "                                                                  'conv1d_70[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_70 (BatchN  (None, None, 32)    128         ['add_33[0][0]']                 \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_72 (Activation)     (None, None, 32)     0           ['batch_normalization_70[0][0]'] \n",
            "                                                                                                  \n",
            " conv1d_71 (Conv1D)             (None, None, 32)     16416       ['activation_72[0][0]']          \n",
            "                                                                                                  \n",
            " batch_normalization_71 (BatchN  (None, None, 32)    128         ['conv1d_71[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_73 (Activation)     (None, None, 32)     0           ['batch_normalization_71[0][0]'] \n",
            "                                                                                                  \n",
            " dropout_34 (Dropout)           (None, None, 32)     0           ['activation_73[0][0]']          \n",
            "                                                                                                  \n",
            " max_pooling1d_34 (MaxPooling1D  (None, None, 32)    0           ['add_33[0][0]']                 \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " conv1d_72 (Conv1D)             (None, None, 32)     16416       ['dropout_34[0][0]']             \n",
            "                                                                                                  \n",
            " add_34 (Add)                   (None, None, 32)     0           ['max_pooling1d_34[0][0]',       \n",
            "                                                                  'conv1d_72[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_72 (BatchN  (None, None, 32)    128         ['add_34[0][0]']                 \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_74 (Activation)     (None, None, 32)     0           ['batch_normalization_72[0][0]'] \n",
            "                                                                                                  \n",
            " conv1d_73 (Conv1D)             (None, None, 32)     16416       ['activation_74[0][0]']          \n",
            "                                                                                                  \n",
            " batch_normalization_73 (BatchN  (None, None, 32)    128         ['conv1d_73[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_75 (Activation)     (None, None, 32)     0           ['batch_normalization_73[0][0]'] \n",
            "                                                                                                  \n",
            " dropout_35 (Dropout)           (None, None, 32)     0           ['activation_75[0][0]']          \n",
            "                                                                                                  \n",
            " max_pooling1d_35 (MaxPooling1D  (None, None, 32)    0           ['add_34[0][0]']                 \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " conv1d_74 (Conv1D)             (None, None, 32)     16416       ['dropout_35[0][0]']             \n",
            "                                                                                                  \n",
            " add_35 (Add)                   (None, None, 32)     0           ['max_pooling1d_35[0][0]',       \n",
            "                                                                  'conv1d_74[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_74 (BatchN  (None, None, 32)    128         ['add_35[0][0]']                 \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_76 (Activation)     (None, None, 32)     0           ['batch_normalization_74[0][0]'] \n",
            "                                                                                                  \n",
            " conv1d_75 (Conv1D)             (None, None, 64)     32832       ['activation_76[0][0]']          \n",
            "                                                                                                  \n",
            " batch_normalization_75 (BatchN  (None, None, 64)    256         ['conv1d_75[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_77 (Activation)     (None, None, 64)     0           ['batch_normalization_75[0][0]'] \n",
            "                                                                                                  \n",
            " max_pooling1d_36 (MaxPooling1D  (None, None, 32)    0           ['add_35[0][0]']                 \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " dropout_36 (Dropout)           (None, None, 64)     0           ['activation_77[0][0]']          \n",
            "                                                                                                  \n",
            " lambda_6 (Lambda)              (None, None, 64)     0           ['max_pooling1d_36[0][0]']       \n",
            "                                                                                                  \n",
            " conv1d_76 (Conv1D)             (None, None, 64)     65600       ['dropout_36[0][0]']             \n",
            "                                                                                                  \n",
            " add_36 (Add)                   (None, None, 64)     0           ['lambda_6[0][0]',               \n",
            "                                                                  'conv1d_76[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_76 (BatchN  (None, None, 64)    256         ['add_36[0][0]']                 \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_78 (Activation)     (None, None, 64)     0           ['batch_normalization_76[0][0]'] \n",
            "                                                                                                  \n",
            " conv1d_77 (Conv1D)             (None, None, 64)     65600       ['activation_78[0][0]']          \n",
            "                                                                                                  \n",
            " batch_normalization_77 (BatchN  (None, None, 64)    256         ['conv1d_77[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_79 (Activation)     (None, None, 64)     0           ['batch_normalization_77[0][0]'] \n",
            "                                                                                                  \n",
            " dropout_37 (Dropout)           (None, None, 64)     0           ['activation_79[0][0]']          \n",
            "                                                                                                  \n",
            " max_pooling1d_37 (MaxPooling1D  (None, None, 64)    0           ['add_36[0][0]']                 \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " conv1d_78 (Conv1D)             (None, None, 64)     65600       ['dropout_37[0][0]']             \n",
            "                                                                                                  \n",
            " add_37 (Add)                   (None, None, 64)     0           ['max_pooling1d_37[0][0]',       \n",
            "                                                                  'conv1d_78[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_78 (BatchN  (None, None, 64)    256         ['add_37[0][0]']                 \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_80 (Activation)     (None, None, 64)     0           ['batch_normalization_78[0][0]'] \n",
            "                                                                                                  \n",
            " conv1d_79 (Conv1D)             (None, None, 64)     65600       ['activation_80[0][0]']          \n",
            "                                                                                                  \n",
            " batch_normalization_79 (BatchN  (None, None, 64)    256         ['conv1d_79[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_81 (Activation)     (None, None, 64)     0           ['batch_normalization_79[0][0]'] \n",
            "                                                                                                  \n",
            " dropout_38 (Dropout)           (None, None, 64)     0           ['activation_81[0][0]']          \n",
            "                                                                                                  \n",
            " max_pooling1d_38 (MaxPooling1D  (None, None, 64)    0           ['add_37[0][0]']                 \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " conv1d_80 (Conv1D)             (None, None, 64)     65600       ['dropout_38[0][0]']             \n",
            "                                                                                                  \n",
            " add_38 (Add)                   (None, None, 64)     0           ['max_pooling1d_38[0][0]',       \n",
            "                                                                  'conv1d_80[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_80 (BatchN  (None, None, 64)    256         ['add_38[0][0]']                 \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_82 (Activation)     (None, None, 64)     0           ['batch_normalization_80[0][0]'] \n",
            "                                                                                                  \n",
            " conv1d_81 (Conv1D)             (None, None, 64)     65600       ['activation_82[0][0]']          \n",
            "                                                                                                  \n",
            " batch_normalization_81 (BatchN  (None, None, 64)    256         ['conv1d_81[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_83 (Activation)     (None, None, 64)     0           ['batch_normalization_81[0][0]'] \n",
            "                                                                                                  \n",
            " dropout_39 (Dropout)           (None, None, 64)     0           ['activation_83[0][0]']          \n",
            "                                                                                                  \n",
            " max_pooling1d_39 (MaxPooling1D  (None, None, 64)    0           ['add_38[0][0]']                 \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " conv1d_82 (Conv1D)             (None, None, 64)     65600       ['dropout_39[0][0]']             \n",
            "                                                                                                  \n",
            " add_39 (Add)                   (None, None, 64)     0           ['max_pooling1d_39[0][0]',       \n",
            "                                                                  'conv1d_82[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_82 (BatchN  (None, None, 64)    256         ['add_39[0][0]']                 \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_84 (Activation)     (None, None, 64)     0           ['batch_normalization_82[0][0]'] \n",
            "                                                                                                  \n",
            " conv1d_83 (Conv1D)             (None, None, 128)    131200      ['activation_84[0][0]']          \n",
            "                                                                                                  \n",
            " batch_normalization_83 (BatchN  (None, None, 128)   512         ['conv1d_83[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_85 (Activation)     (None, None, 128)    0           ['batch_normalization_83[0][0]'] \n",
            "                                                                                                  \n",
            " max_pooling1d_40 (MaxPooling1D  (None, None, 64)    0           ['add_39[0][0]']                 \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " dropout_40 (Dropout)           (None, None, 128)    0           ['activation_85[0][0]']          \n",
            "                                                                                                  \n",
            " lambda_7 (Lambda)              (None, None, 128)    0           ['max_pooling1d_40[0][0]']       \n",
            "                                                                                                  \n",
            " conv1d_84 (Conv1D)             (None, None, 128)    262272      ['dropout_40[0][0]']             \n",
            "                                                                                                  \n",
            " add_40 (Add)                   (None, None, 128)    0           ['lambda_7[0][0]',               \n",
            "                                                                  'conv1d_84[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_84 (BatchN  (None, None, 128)   512         ['add_40[0][0]']                 \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_86 (Activation)     (None, None, 128)    0           ['batch_normalization_84[0][0]'] \n",
            "                                                                                                  \n",
            " conv1d_85 (Conv1D)             (None, None, 128)    262272      ['activation_86[0][0]']          \n",
            "                                                                                                  \n",
            " batch_normalization_85 (BatchN  (None, None, 128)   512         ['conv1d_85[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_87 (Activation)     (None, None, 128)    0           ['batch_normalization_85[0][0]'] \n",
            "                                                                                                  \n",
            " dropout_41 (Dropout)           (None, None, 128)    0           ['activation_87[0][0]']          \n",
            "                                                                                                  \n",
            " max_pooling1d_41 (MaxPooling1D  (None, None, 128)   0           ['add_40[0][0]']                 \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " conv1d_86 (Conv1D)             (None, None, 128)    262272      ['dropout_41[0][0]']             \n",
            "                                                                                                  \n",
            " add_41 (Add)                   (None, None, 128)    0           ['max_pooling1d_41[0][0]',       \n",
            "                                                                  'conv1d_86[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_86 (BatchN  (None, None, 128)   512         ['add_41[0][0]']                 \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_88 (Activation)     (None, None, 128)    0           ['batch_normalization_86[0][0]'] \n",
            "                                                                                                  \n",
            " conv1d_87 (Conv1D)             (None, None, 128)    262272      ['activation_88[0][0]']          \n",
            "                                                                                                  \n",
            " batch_normalization_87 (BatchN  (None, None, 128)   512         ['conv1d_87[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_89 (Activation)     (None, None, 128)    0           ['batch_normalization_87[0][0]'] \n",
            "                                                                                                  \n",
            " dropout_42 (Dropout)           (None, None, 128)    0           ['activation_89[0][0]']          \n",
            "                                                                                                  \n",
            " max_pooling1d_42 (MaxPooling1D  (None, None, 128)   0           ['add_41[0][0]']                 \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " conv1d_88 (Conv1D)             (None, None, 128)    262272      ['dropout_42[0][0]']             \n",
            "                                                                                                  \n",
            " add_42 (Add)                   (None, None, 128)    0           ['max_pooling1d_42[0][0]',       \n",
            "                                                                  'conv1d_88[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_88 (BatchN  (None, None, 128)   512         ['add_42[0][0]']                 \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_90 (Activation)     (None, None, 128)    0           ['batch_normalization_88[0][0]'] \n",
            "                                                                                                  \n",
            " conv1d_89 (Conv1D)             (None, None, 128)    262272      ['activation_90[0][0]']          \n",
            "                                                                                                  \n",
            " batch_normalization_89 (BatchN  (None, None, 128)   512         ['conv1d_89[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_91 (Activation)     (None, None, 128)    0           ['batch_normalization_89[0][0]'] \n",
            "                                                                                                  \n",
            " dropout_43 (Dropout)           (None, None, 128)    0           ['activation_91[0][0]']          \n",
            "                                                                                                  \n",
            " max_pooling1d_43 (MaxPooling1D  (None, None, 128)   0           ['add_42[0][0]']                 \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " conv1d_90 (Conv1D)             (None, None, 128)    262272      ['dropout_43[0][0]']             \n",
            "                                                                                                  \n",
            " add_43 (Add)                   (None, None, 128)    0           ['max_pooling1d_43[0][0]',       \n",
            "                                                                  'conv1d_90[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_90 (BatchN  (None, None, 128)   512         ['add_43[0][0]']                 \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_92 (Activation)     (None, None, 128)    0           ['batch_normalization_90[0][0]'] \n",
            "                                                                                                  \n",
            " conv1d_91 (Conv1D)             (None, None, 256)    524544      ['activation_92[0][0]']          \n",
            "                                                                                                  \n",
            " batch_normalization_91 (BatchN  (None, None, 256)   1024        ['conv1d_91[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_93 (Activation)     (None, None, 256)    0           ['batch_normalization_91[0][0]'] \n",
            "                                                                                                  \n",
            " max_pooling1d_44 (MaxPooling1D  (None, None, 128)   0           ['add_43[0][0]']                 \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " dropout_44 (Dropout)           (None, None, 256)    0           ['activation_93[0][0]']          \n",
            "                                                                                                  \n",
            " lambda_8 (Lambda)              (None, None, 256)    0           ['max_pooling1d_44[0][0]']       \n",
            "                                                                                                  \n",
            " conv1d_92 (Conv1D)             (None, None, 256)    1048832     ['dropout_44[0][0]']             \n",
            "                                                                                                  \n",
            " add_44 (Add)                   (None, None, 256)    0           ['lambda_8[0][0]',               \n",
            "                                                                  'conv1d_92[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_92 (BatchN  (None, None, 256)   1024        ['add_44[0][0]']                 \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_94 (Activation)     (None, None, 256)    0           ['batch_normalization_92[0][0]'] \n",
            "                                                                                                  \n",
            " conv1d_93 (Conv1D)             (None, None, 256)    1048832     ['activation_94[0][0]']          \n",
            "                                                                                                  \n",
            " batch_normalization_93 (BatchN  (None, None, 256)   1024        ['conv1d_93[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_95 (Activation)     (None, None, 256)    0           ['batch_normalization_93[0][0]'] \n",
            "                                                                                                  \n",
            " dropout_45 (Dropout)           (None, None, 256)    0           ['activation_95[0][0]']          \n",
            "                                                                                                  \n",
            " max_pooling1d_45 (MaxPooling1D  (None, None, 256)   0           ['add_44[0][0]']                 \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " conv1d_94 (Conv1D)             (None, None, 256)    1048832     ['dropout_45[0][0]']             \n",
            "                                                                                                  \n",
            " add_45 (Add)                   (None, None, 256)    0           ['max_pooling1d_45[0][0]',       \n",
            "                                                                  'conv1d_94[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_94 (BatchN  (None, None, 256)   1024        ['add_45[0][0]']                 \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_96 (Activation)     (None, None, 256)    0           ['batch_normalization_94[0][0]'] \n",
            "                                                                                                  \n",
            " conv1d_95 (Conv1D)             (None, None, 256)    1048832     ['activation_96[0][0]']          \n",
            "                                                                                                  \n",
            " batch_normalization_95 (BatchN  (None, None, 256)   1024        ['conv1d_95[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_97 (Activation)     (None, None, 256)    0           ['batch_normalization_95[0][0]'] \n",
            "                                                                                                  \n",
            " dropout_46 (Dropout)           (None, None, 256)    0           ['activation_97[0][0]']          \n",
            "                                                                                                  \n",
            " max_pooling1d_46 (MaxPooling1D  (None, None, 256)   0           ['add_45[0][0]']                 \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " conv1d_96 (Conv1D)             (None, None, 256)    1048832     ['dropout_46[0][0]']             \n",
            "                                                                                                  \n",
            " add_46 (Add)                   (None, None, 256)    0           ['max_pooling1d_46[0][0]',       \n",
            "                                                                  'conv1d_96[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_96 (BatchN  (None, None, 256)   1024        ['add_46[0][0]']                 \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_98 (Activation)     (None, None, 256)    0           ['batch_normalization_96[0][0]'] \n",
            "                                                                                                  \n",
            " conv1d_97 (Conv1D)             (None, None, 256)    1048832     ['activation_98[0][0]']          \n",
            "                                                                                                  \n",
            " batch_normalization_97 (BatchN  (None, None, 256)   1024        ['conv1d_97[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_99 (Activation)     (None, None, 256)    0           ['batch_normalization_97[0][0]'] \n",
            "                                                                                                  \n",
            " dropout_47 (Dropout)           (None, None, 256)    0           ['activation_99[0][0]']          \n",
            "                                                                                                  \n",
            " max_pooling1d_47 (MaxPooling1D  (None, None, 256)   0           ['add_46[0][0]']                 \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " conv1d_98 (Conv1D)             (None, None, 256)    1048832     ['dropout_47[0][0]']             \n",
            "                                                                                                  \n",
            " add_47 (Add)                   (None, None, 256)    0           ['max_pooling1d_47[0][0]',       \n",
            "                                                                  'conv1d_98[0][0]']              \n",
            "                                                                                                  \n",
            " batch_normalization_98 (BatchN  (None, None, 256)   1024        ['add_47[0][0]']                 \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " activation_100 (Activation)    (None, None, 256)    0           ['batch_normalization_98[0][0]'] \n",
            "                                                                                                  \n",
            " time_distributed_2 (TimeDistri  (None, None, 4)     1028        ['activation_100[0][0]']         \n",
            " buted)                                                                                           \n",
            "                                                                                                  \n",
            " activation_101 (Activation)    (None, None, 4)      0           ['time_distributed_2[0][0]']     \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 10,473,892\n",
            "Trainable params: 10,466,148\n",
            "Non-trainable params: 7,744\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if params.get(\"generator\", False):\n",
        "    train_gen = load.data_generator(batch_size, preproc, *train)\n",
        "    dev_gen = load.data_generator(batch_size, preproc, *dev)\n",
        "    model.fit_generator(\n",
        "        train_gen,\n",
        "        steps_per_epoch=int(len(train[0]) / batch_size),\n",
        "        epochs=MAX_EPOCHS,\n",
        "        validation_data=dev_gen,\n",
        "        validation_steps=int(len(dev[0]) / batch_size),\n",
        "        callbacks=[checkpointer, reduce_lr, stopping])\n",
        "else:\n",
        "    train_x, train_y = preproc.process(*train)\n",
        "    dev_x, dev_y = preproc.process(*dev)\n",
        "    model.fit(\n",
        "        train_x, train_y,\n",
        "        batch_size=batch_size,\n",
        "        epochs=1,\n",
        "        validation_data=(dev_x, dev_y),\n",
        "        callbacks=[checkpointer, reduce_lr, stopping])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mc08NfVFhvxn",
        "outputId": "3139da3a-873c-4052-f969-4fa00da745e9"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-23-928acd268cff>:4: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  model.fit_generator(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "239/239 [==============================] - 40s 114ms/step - loss: 0.8983 - accuracy: 0.6371 - val_loss: 4.8679 - val_accuracy: 0.4568 - lr: 0.0010\n",
            "Epoch 2/100\n",
            "239/239 [==============================] - 26s 109ms/step - loss: 0.6804 - accuracy: 0.7368 - val_loss: 0.9899 - val_accuracy: 0.6746 - lr: 0.0010\n",
            "Epoch 3/100\n",
            "239/239 [==============================] - 26s 109ms/step - loss: 0.5970 - accuracy: 0.7793 - val_loss: 0.6339 - val_accuracy: 0.7635 - lr: 0.0010\n",
            "Epoch 4/100\n",
            "239/239 [==============================] - 26s 108ms/step - loss: 0.5360 - accuracy: 0.8076 - val_loss: 0.5614 - val_accuracy: 0.8081 - lr: 0.0010\n",
            "Epoch 5/100\n",
            "239/239 [==============================] - 26s 108ms/step - loss: 0.4990 - accuracy: 0.8250 - val_loss: 0.4776 - val_accuracy: 0.8276 - lr: 0.0010\n",
            "Epoch 6/100\n",
            "239/239 [==============================] - 26s 109ms/step - loss: 0.4673 - accuracy: 0.8360 - val_loss: 0.4567 - val_accuracy: 0.8260 - lr: 0.0010\n",
            "Epoch 7/100\n",
            "239/239 [==============================] - 26s 109ms/step - loss: 0.4384 - accuracy: 0.8467 - val_loss: 0.4778 - val_accuracy: 0.8322 - lr: 0.0010\n",
            "Epoch 8/100\n",
            "239/239 [==============================] - 26s 109ms/step - loss: 0.4162 - accuracy: 0.8523 - val_loss: 0.4797 - val_accuracy: 0.8302 - lr: 0.0010\n",
            "Epoch 9/100\n",
            "239/239 [==============================] - 26s 109ms/step - loss: 0.3588 - accuracy: 0.8700 - val_loss: 0.4049 - val_accuracy: 0.8584 - lr: 1.0000e-04\n",
            "Epoch 10/100\n",
            "239/239 [==============================] - 26s 109ms/step - loss: 0.3262 - accuracy: 0.8842 - val_loss: 0.4085 - val_accuracy: 0.8551 - lr: 1.0000e-04\n",
            "Epoch 11/100\n",
            "239/239 [==============================] - 26s 108ms/step - loss: 0.3126 - accuracy: 0.8890 - val_loss: 0.4181 - val_accuracy: 0.8509 - lr: 1.0000e-04\n",
            "Epoch 12/100\n",
            "239/239 [==============================] - 26s 109ms/step - loss: 0.2932 - accuracy: 0.8956 - val_loss: 0.4101 - val_accuracy: 0.8584 - lr: 1.0000e-05\n",
            "Epoch 13/100\n",
            "239/239 [==============================] - 26s 108ms/step - loss: 0.2909 - accuracy: 0.8969 - val_loss: 0.4100 - val_accuracy: 0.8592 - lr: 1.0000e-05\n",
            "Epoch 14/100\n",
            "239/239 [==============================] - 26s 109ms/step - loss: 0.2865 - accuracy: 0.8991 - val_loss: 0.4104 - val_accuracy: 0.8597 - lr: 1.0000e-06\n",
            "Epoch 15/100\n",
            "239/239 [==============================] - 26s 109ms/step - loss: 0.2864 - accuracy: 0.8991 - val_loss: 0.4104 - val_accuracy: 0.8599 - lr: 1.0000e-06\n",
            "Epoch 16/100\n",
            "239/239 [==============================] - 26s 108ms/step - loss: 0.2864 - accuracy: 0.8981 - val_loss: 0.4103 - val_accuracy: 0.8599 - lr: 1.0000e-06\n",
            "Epoch 17/100\n",
            "239/239 [==============================] - 26s 108ms/step - loss: 0.2839 - accuracy: 0.9008 - val_loss: 0.4104 - val_accuracy: 0.8600 - lr: 1.0000e-06\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import collections\n",
        "import scipy.stats as sst"
      ],
      "metadata": {
        "id": "LywOtfeJrxUn"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model evaluation"
      ],
      "metadata": {
        "id": "q9_-Edts6vPq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model_checkpoint = \"/content/saved_dir/experiment/1690866990_142/009-0.359-0.870.hdf5\"\n",
        "valid_data = \"./data/saved_json/dev.json\""
      ],
      "metadata": {
        "id": "NBQFz2QE2r_d"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import _pickle as cPickle\n",
        "\n",
        "def _load_(dirname):\n",
        "    preproc_f = os.path.join(dirname, \"preproc.bin\")\n",
        "    with open(preproc_f, 'rb') as fid:\n",
        "        preproc = cPickle.load(fid)\n",
        "    return preproc"
      ],
      "metadata": {
        "id": "2_6cJIgv4NTE"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = load.load_dataset(valid_data)\n",
        "preproc = _load_(os.path.dirname(model_checkpoint))\n",
        "model = keras.models.load_model(model_checkpoint)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7amChEU93bxl",
        "outputId": "185d47e5-8f7b-4015-837f-79b23902966f"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 852/852 [00:00<00:00, 6082.97it/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "tm8CeF0K4-b2"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_path = \"./data/saved_json/train.json\"\n",
        "with open(data_path, 'rb') as fid:\n",
        "    train_labels = [json.loads(l)['labels'] for l in fid]\n",
        "counts = collections.Counter(preproc.class_to_int[l[0]] for l in train_labels)\n",
        "counts = sorted(counts.most_common(), key=lambda x: x[0])\n",
        "counts = list(zip(*counts))[1]\n",
        "smooth = 500\n",
        "counts = np.array(counts)[None, None, :]\n",
        "total = np.sum(counts) + counts.shape[1]\n",
        "prior = (counts + smooth) / float(total)"
      ],
      "metadata": {
        "id": "Wym50a5o42CN"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "probs = []\n",
        "labels = []\n",
        "for x, y  in zip(*data):\n",
        "    x, y = preproc.process([x], [y])\n",
        "    probs.append(model.predict(x))\n",
        "    labels.append(y)"
      ],
      "metadata": {
        "id": "C-MZz7fD5Vg4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "preds = []\n",
        "ground_truth = []\n",
        "for p, g in zip(probs, labels):\n",
        "    preds.append(sst.mode(np.argmax(p / prior, axis=2).squeeze())[0][0])\n",
        "    ground_truth.append(sst.mode(np.argmax(g, axis=2).squeeze())[0][0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dRsrpshI5yR_",
        "outputId": "efb3a963-6020-44f2-a1fb-907deb28fb01"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-40-1b21dfdfe340>:4: FutureWarning: Unlike other reduction functions (e.g. `skew`, `kurtosis`), the default behavior of `mode` typically preserves the axis it acts along. In SciPy 1.11.0, this behavior will change: the default value of `keepdims` will become False, the `axis` over which the statistic is taken will be eliminated, and the value None will no longer be accepted. Set `keepdims` to True or False to avoid this warning.\n",
            "  preds.append(sst.mode(np.argmax(p / prior, axis=2).squeeze())[0][0])\n",
            "<ipython-input-40-1b21dfdfe340>:5: FutureWarning: Unlike other reduction functions (e.g. `skew`, `kurtosis`), the default behavior of `mode` typically preserves the axis it acts along. In SciPy 1.11.0, this behavior will change: the default value of `keepdims` will become False, the `axis` over which the statistic is taken will be eliminated, and the value None will no longer be accepted. Set `keepdims` to True or False to avoid this warning.\n",
            "  ground_truth.append(sst.mode(np.argmax(g, axis=2).squeeze())[0][0])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import sklearn.metrics as skm\n",
        "report = skm.classification_report(\n",
        "            ground_truth, preds,\n",
        "            target_names=preproc.classes,\n",
        "            digits=3)\n",
        "scores = skm.precision_recall_fscore_support(\n",
        "                    ground_truth,\n",
        "                    preds,\n",
        "                    average=None)\n",
        "print(report)\n",
        "print(\"CINC Average {:3f}\".format(np.mean(scores[2][:3])))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xXmvL0iJ54G1",
        "outputId": "d00542a4-bc2e-42fa-93d9-db87971d3e3a"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           A      0.765     0.903     0.828        72\n",
            "           N      0.912     0.897     0.905       486\n",
            "           O      0.804     0.807     0.805       259\n",
            "           ~      0.724     0.600     0.656        35\n",
            "\n",
            "    accuracy                          0.858       852\n",
            "   macro avg      0.801     0.802     0.799       852\n",
            "weighted avg      0.859     0.858     0.858       852\n",
            "\n",
            "CINC Average 0.845995\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math"
      ],
      "metadata": {
        "id": "XTQ6gOuT9c2Q"
      },
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def stats(ground_truth, preds):\n",
        "    labels = range(ground_truth.shape[2])\n",
        "    g = np.argmax(ground_truth, axis=2).ravel()\n",
        "    p = np.argmax(preds, axis=2).ravel()\n",
        "    stat_dict = {}\n",
        "    for i in labels:\n",
        "        # compute all the stats for each label\n",
        "        tp = np.sum(g[g==i] == p[g==i])\n",
        "        fp = np.sum(g[p==i] != p[p==i])\n",
        "        fn = np.sum(g==i) - tp\n",
        "        tn = np.sum(g!=i) - fp\n",
        "        stat_dict[i] = (tp, fp, fn, tn)\n",
        "    return stat_dict\n",
        "\n",
        "def to_set(preds):\n",
        "    idxs = np.argmax(preds, axis=2)\n",
        "    return [list(set(r)) for r in idxs]\n",
        "\n",
        "def set_stats(ground_truth, preds):\n",
        "    labels = range(ground_truth.shape[2])\n",
        "    ground_truth = to_set(ground_truth)\n",
        "    preds = to_set(preds)\n",
        "    stat_dict = {}\n",
        "    for x in labels:\n",
        "        tp = 0; fp = 0; fn = 0; tn = 0;\n",
        "        for g, p in zip(ground_truth, preds):\n",
        "            if x in g and x in p: # tp\n",
        "                tp += 1\n",
        "            if x not in g and x in p: # fp\n",
        "                fp += 1\n",
        "            if x in g and x not in p:\n",
        "                fn += 1\n",
        "            if x not in g and x not in p:\n",
        "                tn += 1\n",
        "        stat_dict[x] = (tp, fp, fn, tn)\n",
        "    return stat_dict\n",
        "\n",
        "def compute_f1(tp, fp, fn, tn):\n",
        "    precision = tp / float(tp + fp)\n",
        "    recall = tp / float(tp + fn)\n",
        "    specificity = tn / float(tn + fp)\n",
        "    npv = tn / float(tn + fn)\n",
        "    f1 = 2 * precision * recall / (precision + recall)\n",
        "    return f1, tp + fn\n",
        "\n",
        "def print_results(seq_sd, set_sd):\n",
        "    print(\"\\t\\t Seq F1    Set F1\")\n",
        "    seq_tf1 = 0; seq_tot = 0\n",
        "    set_tf1 = 0; set_tot = 0\n",
        "    for k, v in seq_sd.items():\n",
        "        set_f1, n = compute_f1(*set_sd[k])\n",
        "        set_tf1 += n * set_f1\n",
        "        set_tot += n\n",
        "        seq_f1, n = compute_f1(*v)\n",
        "        seq_tf1 += n * seq_f1\n",
        "        seq_tot += n\n",
        "        print(\"{:>10} {:10.3f} {:10.3f}\".format(\n",
        "            preproc.classes[k], seq_f1, set_f1))\n",
        "    print(\"{:>10} {:10.3f} {:10.3f}\".format(\n",
        "        \"Average\", seq_tf1 / float(seq_tot), set_tf1 / float(set_tot)))\n",
        "\n",
        "def c_statistic_with_95p_confidence_interval(cstat, num_positives, num_negatives, z_alpha_2=1.96):\n",
        "    \"\"\"\n",
        "    Calculates the confidence interval of an ROC curve (c-statistic), using the method described\n",
        "    under \"Confidence Interval for AUC\" here:\n",
        "      https://ncss-wpengine.netdna-ssl.com/wp-content/themes/ncss/pdf/Procedures/PASS/Confidence_Intervals_for_the_Area_Under_an_ROC_Curve.pdf\n",
        "    Args:\n",
        "        cstat: the c-statistic (equivalent to area under the ROC curve)\n",
        "        num_positives: number of positive examples in the set.\n",
        "        num_negatives: number of negative examples in the set.\n",
        "        z_alpha_2 (optional): the critical value for an N% confidence interval, e.g., 1.96 for 95%,\n",
        "            2.326 for 98%, 2.576 for 99%, etc.\n",
        "    Returns:\n",
        "        The 95% confidence interval half-width, e.g., the Y in X ± Y.\n",
        "    \"\"\"\n",
        "    q1 = cstat / (2 - cstat)\n",
        "    q2 = 2 * cstat**2 / (1 + cstat)\n",
        "    numerator = cstat * (1 - cstat) \\\n",
        "        + (num_positives - 1) * (q1 - cstat**2) \\\n",
        "        + (num_negatives - 1) * (q2 - cstat**2)\n",
        "    standard_error_auc = math.sqrt(numerator / (num_positives * num_negatives))\n",
        "    return z_alpha_2 * standard_error_auc\n",
        "\n",
        "def roc_auc(ground_truth, probs, index):\n",
        "    gts = np.argmax(ground_truth, axis=2)\n",
        "    n_gts = np.zeros_like(gts)\n",
        "    n_gts[gts==index] = 1\n",
        "    n_pos = np.sum(n_gts == 1)\n",
        "    n_neg = n_gts.size - n_pos\n",
        "    n_ps = probs[..., index].squeeze()\n",
        "    n_gts, n_ps = n_gts.ravel(), n_ps.ravel()\n",
        "    return n_pos, n_neg, skm.roc_auc_score(n_gts, n_ps)\n",
        "\n",
        "def roc_auc_set(ground_truth, probs, index):\n",
        "    gts = np.argmax(ground_truth, axis=2)\n",
        "    max_ps = np.max(probs[...,index], axis=1)\n",
        "    max_gts = np.any(gts==index, axis=1)\n",
        "    pos = np.sum(max_gts)\n",
        "    neg = max_gts.size - pos\n",
        "    return pos, neg, skm.roc_auc_score(max_gts, max_ps)\n",
        "\n",
        "def print_aucs(ground_truth, probs):\n",
        "    seq_tauc = 0.0; seq_tot = 0.0\n",
        "    set_tauc = 0.0; set_tot = 0.0\n",
        "    print(\"\\t        AUC\")\n",
        "    for idx, cname in preproc.int_to_class.items():\n",
        "        pos, neg, seq_auc = roc_auc(ground_truth, probs, idx)\n",
        "        seq_tot += pos\n",
        "        seq_tauc += pos * seq_auc\n",
        "        seq_conf = c_statistic_with_95p_confidence_interval(seq_auc, pos, neg)\n",
        "        pos, neg, set_auc = roc_auc_set(ground_truth, probs, idx)\n",
        "        set_tot += pos\n",
        "        set_tauc += pos * set_auc\n",
        "        set_conf = c_statistic_with_95p_confidence_interval(set_auc, pos, neg)\n",
        "        print(\"{: <8}\\t{:.3f} ({:.3f}-{:.3f})\\t{:.3f} ({:.3f}-{:.3f})\".format(\n",
        "            cname, seq_auc, seq_auc-seq_conf,seq_auc+seq_conf,\n",
        "            set_auc, set_auc-set_conf, set_auc+set_conf))\n",
        "    print(\"Average\\t\\t{:.3f}\\t{:.3f}\".format(seq_tauc/seq_tot, set_tauc/set_tot))"
      ],
      "metadata": {
        "id": "tlDfIb_S6DHm"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = load.load_dataset(valid_data)\n",
        "ecgs, labels = preproc.process(*dataset)\n",
        "probs = model.predict(ecgs, verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0BcTBXWu9EBj",
        "outputId": "eea1ba3e-8c65-40d9-dfbe-632848926ca1"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 852/852 [00:00<00:00, 6206.28it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "27/27 [==============================] - 2s 58ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print_results(stats(labels, probs), set_stats(labels, probs))\n",
        "print_aucs(labels, probs)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TOQLYgE78dcd",
        "outputId": "7bc7d978-cc58-4f58-b1fd-763ceb2e7149"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\t\t Seq F1    Set F1\n",
            "         A      0.806      0.800\n",
            "         N      0.899      0.887\n",
            "         O      0.788      0.781\n",
            "         ~      0.979      0.990\n",
            "   Average      0.914      0.919\n",
            "\t        AUC\n",
            "A       \t0.982 (0.979-0.986)\t0.986 (0.967-1.005)\n",
            "N       \t0.979 (0.978-0.981)\t0.935 (0.918-0.951)\n",
            "O       \t0.921 (0.917-0.925)\t0.928 (0.905-0.950)\n",
            "~       \t0.998 (0.998-0.999)\t1.000 (1.000-1.000)\n",
            "Average\t\t0.979\t0.969\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model test stats"
      ],
      "metadata": {
        "id": "b3MlbBlN_Mu3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib\n",
        "import sklearn"
      ],
      "metadata": {
        "id": "Vh4HjWZg-hlD"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_confusions(cm, xlabel, filename):\n",
        "    cm = sklearn.preprocessing.normalize(cm, norm='l1', axis=1, copy=True)\n",
        "    classes = preproc.classes\n",
        "    matplotlib.rcParams['figure.figsize'] = (8, 7)\n",
        "    plt.pcolor(np.flipud(cm), cmap=\"Blues\")\n",
        "    cbar = plt.colorbar()\n",
        "    cbar.ax.tick_params(labelsize=16)\n",
        "    tick_marks = np.arange(len(classes))\n",
        "    plt.xticks(tick_marks + .5, classes, rotation=90, fontsize=16)\n",
        "    plt.yticks(tick_marks + .5, reversed(classes), fontsize=16)\n",
        "    plt.clim(0, 1)\n",
        "    plt.ylabel(\"Committee consensus label\", fontsize=16)\n",
        "    plt.xlabel(xlabel, fontsize=16)\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(filename,\n",
        "                dpi=400,\n",
        "                format='pdf',\n",
        "                bbox_inches='tight')"
      ],
      "metadata": {
        "id": "_CyCy7Gf-gJ0"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cm = skm.confusion_matrix(np.argmax(labels, axis=2).ravel(),\n",
        "                      np.argmax(probs, axis=2).ravel())\n",
        "plot_confusions(cm, \"DNN predicted label\", \"model_confusions.pdf\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 707
        },
        "id": "a8Ee91S3-qtM",
        "outputId": "db9de215-8704-408f-dd86-7ff3861191d7"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "vt_class_idx = preproc.class_to_int[\"A\"]\n",
        "vt_idx = np.where(np.any(np.argmax(labels, axis=2) == vt_class_idx, axis=1))[0]\n",
        "\n",
        "model_vt_idx = np.where(np.any(np.argmax(probs, axis=2) == vt_class_idx, axis=1))[0]"
      ],
      "metadata": {
        "id": "z1KWnhFN-4_F"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "missed = list(set(model_vt_idx).difference(set(vt_idx)))\n",
        "for m in missed:\n",
        "    print(np.argmax(labels, axis=2)[m, :], np.argmax(probs,axis=2)[m,:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lVSxj1yE-_rT",
        "outputId": "f6e079a0-7e41-4170-e42c-58186705fbd4"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 2 2 2 0 2 0 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 0 0 0 0 1 0 1 0 0 0 1 1 1 1 1 1 1 1 0 1 1 0 0 0 0 0 0 1 1 0 1 2 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 0 0 0 2 2 2 2 2 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
            " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 3]\n",
            "[3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 0 0 0 0 0 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [2 2 1 2 2 2 2 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 0 1 1 2 2 2 2 2 3 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [2 2 1 2 2 1 2 0 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 0 0 2 2 0 0 0 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 2 2 2 2 0 0 2 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 0 2 2 2 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 2 2 2 2 2 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 3 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [2 2 0 0 0 0 2 0 2 0 2 2 2 0 2 2 0 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 0 0 0 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n",
            "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 3 3 3\n",
            " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ROC and PR curves"
      ],
      "metadata": {
        "id": "nW3UQ0QQ_ZuS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import roc_curve\n",
        "from sklearn.metrics import roc_auc_score"
      ],
      "metadata": {
        "id": "6FMxZ5moBJsK"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# calculate scores\n",
        "ns_probs = [0 for _ in range(len(labels))]\n",
        "ns_auc = roc_auc_score(labels, ns_probs)\n",
        "\n",
        "lr_auc = roc_auc_score(labels, probs)\n",
        "# summarize scores\n",
        "print('No Skill: ROC AUC=%.3f' % (ns_auc))\n",
        "print('Logistic: ROC AUC=%.3f' % (lr_auc))\n",
        "# calculate roc curves\n",
        "ns_fpr, ns_tpr, _ = roc_curve(labels, ns_probs)\n",
        "lr_fpr, lr_tpr, _ = roc_curve(labels, probs)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 397
        },
        "id": "q3Y8gZJy_W41",
        "outputId": "de65e8cd-a706-471e-c6ec-481dafd955e3"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-63-bf22d0eab5b9>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# calculate scores\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mns_probs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mns_auc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mroc_auc_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mns_probs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mlr_auc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mroc_auc_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# summarize scores\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_ranking.py\u001b[0m in \u001b[0;36mroc_auc_score\u001b[0;34m(y_true, y_score, average, sample_weight, max_fpr, multi_class, labels)\u001b[0m\n\u001b[1;32m    548\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    549\u001b[0m     \u001b[0my_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype_of_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y_true\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 550\u001b[0;31m     \u001b[0my_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    551\u001b[0m     \u001b[0my_score\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_score\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m    913\u001b[0m             )\n\u001b[1;32m    914\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mallow_nd\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 915\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    916\u001b[0m                 \u001b[0;34m\"Found array with dim %d. %s expected <= 2.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    917\u001b[0m                 \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mestimator_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Found array with dim 3. None expected <= 2."
          ]
        }
      ]
    }
  ]
}